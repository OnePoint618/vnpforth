#!/bin/bash
# vi: set ts=8 shiftwidth=8 expandtab:
#
# VNPForth - Compiled native Forth for x86 Linux
# Copyright (C) 2005-2013  Simon Baldwin (simon_baldwin@yahoo.com)
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#

# Wrapper for running a set of compiler tests.  This wrapper compiles each
# test file and checks that the compiler returns the expected status.

if [[ $# -lt 2 ]]; then
  echo "Usage: $0 log test_file [ test_file ... ]"
  exit 1
fi

declare -r REPORT="$1"
shift
declare -r TESTS="$*"

declare -r FORTHC="../forthc"

rm -f $REPORT

echo "$0: Running compile tests..."
status=0
for file in $TESTS; do

  echo "Compiling $file..." >> $REPORT
  echo "$file: $(cat $file)" >> $REPORT
  echo -n "$file "
  $FORTHC '-Ddef' '-Uundef' -g -P -S '-fPIC' -O "$file" >> $REPORT 2>&1
  compiled=$?

  if grep -i -q '^[ ]*( [ ]*expect_failure [ ]*)' < "$file"; then
    expected=1
  else
    if grep -i -q '^[ ]*( [ ]*expect_success [ ]*)' < "$file"; then
      expected=0
    else
      echo "$file: FAIL, tester tag is missing or invalid" >> $REPORT
      echo ""
      echo "$file: FAIL, tester tag is missing or invalid"
      status=1
      continue
    fi
  fi

  if [[ $compiled -ne $expected ]]; then
    echo "$file: FAIL, returned unexpected status $compiled" >> $REPORT
    echo ""
    echo "$0: $file: FAIL, returned unexpected status $compiled"
    status=1
  else
    echo "$file: PASS" >> $REPORT
  fi

  echo "" >> $REPORT
done
echo ""
[[ $status -eq 0 ]] && echo "$0: PASS" || echo "$0: FAIL"

exit $status
