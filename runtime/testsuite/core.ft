\ vi: set ts=8 shiftwidth=8 noexpandtab:

\ (C) 1993 JOHNS HOPKINS UNIVERSITY / APPLIED PHYSICS LABORATORY
\ MAY BE DISTRIBUTED FREELY AS LONG AS THIS COPYRIGHT NOTICE REMAINS.
\ VERSION 1.0
\ THIS PROGRAM TESTS THE CORE WORDS OF AN ANS FORTH SYSTEM.
\ THE PROGRAM ASSUMES A TWO'S COMPLEMENT IMPLEMENTATION WHERE
\ THE RANGE OF SIGNED NUMBERS IS -2^(N-1) ... 2^(N-1)-1 AND
\ THE RANGE OF UNSIGNED NUMBER IS 0 ... 2^(N)-1.
\ I HAVEN'T FIGURED OUT HOW TO TEST KEY, QUIT, ABORT, OR ABORT"...
\ I ALSO HAVEN'T THOUGHT OF A WAY TO TEST ENVIRONMENT?...

." TESTING CORE WORDS" CR
\ HEX
\	TRUE VERBOSE !
	TRUE _STRICTANSI !

\ ------------------------------------------------------------------------
." TESTING BOOLEANS: INVERT AND OR XOR" CR

 180 { 0 0 AND -> 0 }
 190 { 0 1 AND -> 0 }
 200 { 1 0 AND -> 0 }
 210 { 1 1 AND -> 1 }

 230 { 0 INVERT 1 AND -> 1 }
 240 { 1 INVERT 1 AND -> 0 }

     0		CONSTANT 0S
     0 INVERT	CONSTANT 1S

 290 { 0S INVERT -> 1S }
 300 { 1S INVERT -> 0S }

 320 { 0S 0S AND -> 0S }
 330 { 0S 1S AND -> 0S }
 340 { 1S 0S AND -> 0S }
 350 { 1S 1S AND -> 1S }

 370 { 0S 0S OR -> 0S }
 380 { 0S 1S OR -> 1S }
 390 { 1S 0S OR -> 1S }
 400 { 1S 1S OR -> 1S }

 420 { 0S 0S XOR -> 0S }
 430 { 0S 1S XOR -> 1S }
 440 { 1S 0S XOR -> 1S }
 450 { 1S 1S XOR -> 0S }

\ ------------------------------------------------------------------------
." TESTING 2* 2/ LSHIFT RSHIFT" CR

     : FIND-MSB
        1 BEGIN DUP 2* WHILE 2* REPEAT ;
     FIND-MSB CONSTANT MSB

 540 { 0 2* -> 0 }
 550 { 1 2* -> 2 }
 560 { 0x4000 2* -> 0x8000 }
 570 { 0 INVERT 2* 1 XOR -> 0 INVERT }
 580 { MSB 2* -> 0 }

 600 { 0 2/ -> 0 }
 610 { 1 2/ -> 0 }
 620 { 0x4000 2/ -> 0x2000 }
 630 { 0 INVERT 2/ -> 0 INVERT }		\ MSB PROPOGATED
 640 { 0 INVERT 1 XOR 2/ -> 0 INVERT }
 650 { MSB 2/ MSB AND -> MSB }

 670 { 1 0 LSHIFT -> 1 }
 680 { 1 1 LSHIFT -> 2 }
 690 { 1 2 LSHIFT -> 4 }
 700 { 1 0xF LSHIFT -> 0x8000 }			\ BIGGEST GUARANTEED SHIFT
 710 { 0 INVERT 1 LSHIFT 1 XOR -> 0 INVERT }
 720 { MSB 1 LSHIFT -> 0 }

 740 { 1 0 RSHIFT -> 1 }
 750 { 1 1 RSHIFT -> 0 }
 760 { 2 1 RSHIFT -> 1 }
 770 { 4 2 RSHIFT -> 1 }
 780 { 0x8000 0xF RSHIFT -> 1 }			\ BIGGEST
 790 { MSB 1 RSHIFT MSB AND -> 0 }		\ RSHIFT ZERO FILLS MSBS
 800 { MSB 1 RSHIFT 2* -> MSB }

\ ------------------------------------------------------------------------
." TESTING COMPARISONS: 0= = 0< < > U< MIN MAX" CR
     0 INVERT			CONSTANT MAX-UINT
     0 INVERT 1 RSHIFT		CONSTANT MAX-INT
     0 INVERT 1 RSHIFT INVERT	CONSTANT MIN-INT
     0 INVERT 1 RSHIFT		CONSTANT MID-UINT
     0 INVERT 1 RSHIFT INVERT	CONSTANT MID-UINT+1

     0S CONSTANT <FALSE>
     1S CONSTANT <TRUE>

 930 { -> }					\ START WITH CLEAN SLATE
 940 { 0 0= -> <TRUE> }
 950 { 1 0= -> <FALSE> }
 960 { 2 0= -> <FALSE> }
 970 { -1 0= -> <FALSE> }
 980 { MAX-UINT 0= -> <FALSE> }
 990 { MIN-INT 0= -> <FALSE> }
1000 { MAX-INT 0= -> <FALSE> }

1020 { 0 0 = -> <TRUE> }
1030 { 1 1 = -> <TRUE> }
1040 { -1 -1 = -> <TRUE> }
1050 { 1 0 = -> <FALSE> }
1060 { -1 0 = -> <FALSE> }
1070 { 0 1 = -> <FALSE> }
1080 { 0 -1 = -> <FALSE> }

1100 { 0 0< -> <FALSE> }
1110 { -1 0< -> <TRUE> }
1120 { MIN-INT 0< -> <TRUE> }
1130 { 1 0< -> <FALSE> }
1140 { MAX-INT 0< -> <FALSE> }

1160 { 0 1 < -> <TRUE> }
1170 { 1 2 < -> <TRUE> }
1180 { -1 0 < -> <TRUE> }
1190 { -1 1 < -> <TRUE> }
1200 { MIN-INT 0 < -> <TRUE> }
1210 { MIN-INT MAX-INT < -> <TRUE> }
1220 { 0 MAX-INT < -> <TRUE> }
1230 { 0 0 < -> <FALSE> }
1240 { 1 1 < -> <FALSE> }
1250 { 1 0 < -> <FALSE> }
1260 { 2 1 < -> <FALSE> }
1270 { 0 -1 < -> <FALSE> }
1280 { 1 -1 < -> <FALSE> }
1290 { 0 MIN-INT < -> <FALSE> }
1300 { MAX-INT MIN-INT < -> <FALSE> }
1310 { MAX-INT 0 < -> <FALSE> }

1330 { 0 1 > -> <FALSE> }
1340 { 1 2 > -> <FALSE> }
1350 { -1 0 > -> <FALSE> }
1360 { -1 1 > -> <FALSE> }
1370 { MIN-INT 0 > -> <FALSE> }
1380 { MIN-INT MAX-INT > -> <FALSE> }
1390 { 0 MAX-INT > -> <FALSE> }
1400 { 0 0 > -> <FALSE> }
1410 { 1 1 > -> <FALSE> }
1420 { 1 0 > -> <TRUE> }
1430 { 2 1 > -> <TRUE> }
1440 { 0 -1 > -> <TRUE> }
1450 { 1 -1 > -> <TRUE> }
1460 { 0 MIN-INT > -> <TRUE> }
1470 { MAX-INT MIN-INT > -> <TRUE> }
1480 { MAX-INT 0 > -> <TRUE> }

1500 { 0 1 U< -> <TRUE> }
1510 { 1 2 U< -> <TRUE> }
1520 { 0 MID-UINT U< -> <TRUE> }
1530 { 0 MAX-UINT U< -> <TRUE> }
1540 { MID-UINT MAX-UINT U< -> <TRUE> }
1550 { 0 0 U< -> <FALSE> }
1560 { 1 1 U< -> <FALSE> }
1570 { 1 0 U< -> <FALSE> }
1580 { 2 1 U< -> <FALSE> }
1590 { MID-UINT 0 U< -> <FALSE> }
1600 { MAX-UINT 0 U< -> <FALSE> }
1610 { MAX-UINT MID-UINT U< -> <FALSE> }

1630 { 0 1 MIN -> 0 }
1640 { 1 2 MIN -> 1 }
1650 { -1 0 MIN -> -1 }
1660 { -1 1 MIN -> -1 }
1670 { MIN-INT 0 MIN -> MIN-INT }
1680 { MIN-INT MAX-INT MIN -> MIN-INT }
1690 { 0 MAX-INT MIN -> 0 }
1700 { 0 0 MIN -> 0 }
1710 { 1 1 MIN -> 1 }
1720 { 1 0 MIN -> 0 }
1730 { 2 1 MIN -> 1 }
1740 { 0 -1 MIN -> -1 }
1750 { 1 -1 MIN -> -1 }
1760 { 0 MIN-INT MIN -> MIN-INT }
1770 { MAX-INT MIN-INT MIN -> MIN-INT }
1780 { MAX-INT 0 MIN -> 0 }

1800 { 0 1 MAX -> 1 }
1810 { 1 2 MAX -> 2 }
1820 { -1 0 MAX -> 0 }
1830 { -1 1 MAX -> 1 }
1840 { MIN-INT 0 MAX -> 0 }
1850 { MIN-INT MAX-INT MAX -> MAX-INT }
1860 { 0 MAX-INT MAX -> MAX-INT }
1870 { 0 0 MAX -> 0 }
1880 { 1 1 MAX -> 1 }
1890 { 1 0 MAX -> 1 }
1900 { 2 1 MAX -> 2 }
1910 { 0 -1 MAX -> 0 }
1920 { 1 -1 MAX -> 1 }
1930 { 0 MIN-INT MAX -> 0 }
1940 { MAX-INT MIN-INT MAX -> MAX-INT }
1950 { MAX-INT 0 MAX -> MAX-INT }

\ ------------------------------------------------------------------------
." TESTING STACK OPS: 2DROP 2DUP 2OVER 2SWAP ?DUP DEPTH DROP DUP OVER ROT SWAP" CR

2000 { 1 2 2DROP -> }
2010 { 1 2 2DUP -> 1 2 1 2 }
2020 { 1 2 3 4 2OVER -> 1 2 3 4 1 2 }
2030 { 1 2 3 4 2SWAP -> 3 4 1 2 }
2040 { 0 ?DUP -> 0 }
2050 { 1 ?DUP -> 1 1 }
2060 { -1 ?DUP -> -1 -1 }
2070 { DEPTH -> 0 }
2080 { 0 DEPTH -> 0 1 }
2090 { 0 1 DEPTH -> 0 1 2 }
2100 { 0 DROP -> }
2110 { 1 2 DROP -> 1 }
2120 { 1 DUP -> 1 1 }
2130 { 1 2 OVER -> 1 2 1 }
2140 { 1 2 3 ROT -> 2 3 1 }
2150 { 1 2 SWAP -> 2 1 }

\ ------------------------------------------------------------------------
." TESTING >R R> R@" CR

2200 { : GR1 >R R> ; -> }
2210 { : GR2 >R R@ R> DROP ; -> }
2220 { 123 GR1 -> 123 }
2230 { 123 GR2 -> 123 }

\ ------------------------------------------------------------------------
." TESTING ADD/SUBTRACT: + - 1+ 1- ABS NEGATE" CR

2280 { 0 5 + -> 5 }
2290 { 5 0 + -> 5 }
2300 { 0 -5 + -> -5 }
2310 { -5 0 + -> -5 }
2320 { 1 2 + -> 3 }
2330 { 1 -2 + -> -1 }
2340 { -1 2 + -> 1 }
2350 { -1 -2 + -> -3 }
2360 { -1 1 + -> 0 }
2370 { MID-UINT 1 + -> MID-UINT+1 }

2390 { 0 5 - -> -5 }
2400 { 5 0 - -> 5 }
2410 { 0 -5 - -> 5 }
2420 { -5 0 - -> -5 }
2430 { 1 2 - -> -1 }
2440 { 1 -2 - -> 3 }
2450 { -1 2 - -> -3 }
2460 { -1 -2 - -> 1 }
2470 { 0 1 - -> -1 }
2480 { MID-UINT+1 1 - -> MID-UINT }

2500 { 0 1+ -> 1 }
2510 { -1 1+ -> 0 }
2520 { 1 1+ -> 2 }
2530 { MID-UINT 1+ -> MID-UINT+1 }

2550 { 2 1- -> 1 }
2560 { 1 1- -> 0 }
2570 { 0 1- -> -1 }
2580 { MID-UINT+1 1- -> MID-UINT }

2600 { 0 NEGATE -> 0 }
2610 { 1 NEGATE -> -1 }
2620 { -1 NEGATE -> 1 }
2630 { 2 NEGATE -> -2 }
2640 { -2 NEGATE -> 2 }

2660 { 0 ABS -> 0 }
2670 { 1 ABS -> 1 }
2680 { -1 ABS -> 1 }
2690 { MIN-INT ABS -> MID-UINT+1 }

\ ------------------------------------------------------------------------
." TESTING MULTIPLY: S>D * M* UM*" CR

2740 { 0 S>D -> 0 0 }
2750 { 1 S>D -> 1 0 }
2760 { 2 S>D -> 2 0 }
2770 { -1 S>D -> -1 -1 }
2780 { -2 S>D -> -2 -1 }
2790 { MIN-INT S>D -> MIN-INT -1 }
2800 { MAX-INT S>D -> MAX-INT 0 }

2820 { 0 0 M* -> 0 S>D }
2830 { 0 1 M* -> 0 S>D }
2840 { 1 0 M* -> 0 S>D }
2850 { 1 2 M* -> 2 S>D }
2860 { 2 1 M* -> 2 S>D }
2870 { 3 3 M* -> 9 S>D }
2880 { -3 3 M* -> -9 S>D }
2890 { 3 -3 M* -> -9 S>D }
2900 { -3 -3 M* -> 9 S>D }
2910 { 0 MIN-INT M* -> 0 S>D }
2920 { 1 MIN-INT M* -> MIN-INT S>D }
2930 { 2 MIN-INT M* -> 0 1S }
2940 { 0 MAX-INT M* -> 0 S>D }
2950 { 1 MAX-INT M* -> MAX-INT S>D }
2960 { 2 MAX-INT M* -> MAX-INT 1 LSHIFT 0 }
2970 { MIN-INT MIN-INT M* -> 0 MSB 1 RSHIFT }
2980 { MAX-INT MIN-INT M* -> MSB MSB 2/ }
2990 { MAX-INT MAX-INT M* -> 1 MSB 2/ INVERT }

3010 { 0 0 * -> 0 }				\ TEST IDENTITIES
3020 { 0 1 * -> 0 }
3030 { 1 0 * -> 0 }
3040 { 1 2 * -> 2 }
3050 { 2 1 * -> 2 }
3060 { 3 3 * -> 9 }
3070 { -3 3 * -> -9 }
3080 { 3 -3 * -> -9 }
3090 { -3 -3 * -> 9 }

3110 { MID-UINT+1 1 RSHIFT 2 * -> MID-UINT+1 }
3120 { MID-UINT+1 2 RSHIFT 4 * -> MID-UINT+1 }
3130 { MID-UINT+1 1 RSHIFT MID-UINT+1 OR 2 * -> MID-UINT+1 }

3150 { 0 0 UM* -> 0 0 }
3160 { 0 1 UM* -> 0 0 }
3170 { 1 0 UM* -> 0 0 }
3180 { 1 2 UM* -> 2 0 }
3190 { 2 1 UM* -> 2 0 }
3200 { 3 3 UM* -> 9 0 }

3220 { MID-UINT+1 1 RSHIFT 2 UM* -> MID-UINT+1 0 }
3230 { MID-UINT+1 2 UM* -> 0 1 }
3240 { MID-UINT+1 4 UM* -> 0 2 }
3250 { 1S 2 UM* -> 1S 1 LSHIFT 1 }
3260 { MAX-UINT MAX-UINT UM* -> 1 1 INVERT }

\ ------------------------------------------------------------------------
." TESTING DIVIDE: FM/MOD SM/REM UM/MOD */ */MOD / /MOD MOD" CR

3310 { 0 S>D 1 FM/MOD -> 0 0 }
3320 { 1 S>D 1 FM/MOD -> 0 1 }
3330 { 2 S>D 1 FM/MOD -> 0 2 }
3340 { -1 S>D 1 FM/MOD -> 0 -1 }
3350 { -2 S>D 1 FM/MOD -> 0 -2 }
3360 { 0 S>D -1 FM/MOD -> 0 0 }
3370 { 1 S>D -1 FM/MOD -> 0 -1 }
3380 { 2 S>D -1 FM/MOD -> 0 -2 }
3390 { -1 S>D -1 FM/MOD -> 0 1 }
3400 { -2 S>D -1 FM/MOD -> 0 2 }
3410 { 2 S>D 2 FM/MOD -> 0 1 }
3420 { -1 S>D -1 FM/MOD -> 0 1 }
3430 { -2 S>D -2 FM/MOD -> 0 1 }
3440 {  7 S>D  3 FM/MOD -> 1 2 }
3450 {  7 S>D -3 FM/MOD -> -2 -3 }
3460 { -7 S>D  3 FM/MOD -> 2 -3 }
3470 { -7 S>D -3 FM/MOD -> -1 2 }
3480 { MAX-INT S>D 1 FM/MOD -> 0 MAX-INT }
3490 { MIN-INT S>D 1 FM/MOD -> 0 MIN-INT }
3500 { MAX-INT S>D MAX-INT FM/MOD -> 0 1 }
3510 { MIN-INT S>D MIN-INT FM/MOD -> 0 1 }
3520 { 1S 1 4 FM/MOD -> 3 MAX-INT }
3530 { 1 MIN-INT M* 1 FM/MOD -> 0 MIN-INT }
3540 { 1 MIN-INT M* MIN-INT FM/MOD -> 0 1 }
3550 { 2 MIN-INT M* 2 FM/MOD -> 0 MIN-INT }
3560 { 2 MIN-INT M* MIN-INT FM/MOD -> 0 2 }
3570 { 1 MAX-INT M* 1 FM/MOD -> 0 MAX-INT }
3580 { 1 MAX-INT M* MAX-INT FM/MOD -> 0 1 }
3590 { 2 MAX-INT M* 2 FM/MOD -> 0 MAX-INT }
3600 { 2 MAX-INT M* MAX-INT FM/MOD -> 0 2 }
3610 { MIN-INT MIN-INT M* MIN-INT FM/MOD -> 0 MIN-INT }
3620 { MIN-INT MAX-INT M* MIN-INT FM/MOD -> 0 MAX-INT }
3630 { MIN-INT MAX-INT M* MAX-INT FM/MOD -> 0 MIN-INT }
3640 { MAX-INT MAX-INT M* MAX-INT FM/MOD -> 0 MAX-INT }

3660 { 0 S>D 1 SM/REM -> 0 0 }
3670 { 1 S>D 1 SM/REM -> 0 1 }
3680 { 2 S>D 1 SM/REM -> 0 2 }
3690 { -1 S>D 1 SM/REM -> 0 -1 }
3700 { -2 S>D 1 SM/REM -> 0 -2 }
3710 { 0 S>D -1 SM/REM -> 0 0 }
3720 { 1 S>D -1 SM/REM -> 0 -1 }
3730 { 2 S>D -1 SM/REM -> 0 -2 }
3740 { -1 S>D -1 SM/REM -> 0 1 }
3750 { -2 S>D -1 SM/REM -> 0 2 }
3760 { 2 S>D 2 SM/REM -> 0 1 }
3770 { -1 S>D -1 SM/REM -> 0 1 }
3780 { -2 S>D -2 SM/REM -> 0 1 }
3790 {  7 S>D  3 SM/REM -> 1 2 }
3800 {  7 S>D -3 SM/REM -> 1 -2 }
3810 { -7 S>D  3 SM/REM -> -1 -2 }
3820 { -7 S>D -3 SM/REM -> -1 2 }
3830 { MAX-INT S>D 1 SM/REM -> 0 MAX-INT }
3840 { MIN-INT S>D 1 SM/REM -> 0 MIN-INT }
3850 { MAX-INT S>D MAX-INT SM/REM -> 0 1 }
3860 { MIN-INT S>D MIN-INT SM/REM -> 0 1 }
3870 { 1S 1 4 SM/REM -> 3 MAX-INT }
3880 { 2 MIN-INT M* 2 SM/REM -> 0 MIN-INT }
3890 { 2 MIN-INT M* MIN-INT SM/REM -> 0 2 }
3900 { 2 MAX-INT M* 2 SM/REM -> 0 MAX-INT }
3910 { 2 MAX-INT M* MAX-INT SM/REM -> 0 2 }
3920 { MIN-INT MIN-INT M* MIN-INT SM/REM -> 0 MIN-INT }
3930 { MIN-INT MAX-INT M* MIN-INT SM/REM -> 0 MAX-INT }
3940 { MIN-INT MAX-INT M* MAX-INT SM/REM -> 0 MIN-INT }
3950 { MAX-INT MAX-INT M* MAX-INT SM/REM -> 0 MAX-INT }

3970 { 0 0 1 UM/MOD -> 0 0 }
3980 { 1 0 1 UM/MOD -> 0 1 }
3990 { 1 0 2 UM/MOD -> 1 0 }
4000 { 3 0 2 UM/MOD -> 1 1 }
4010 { MAX-UINT 2 UM* 2 UM/MOD -> 0 MAX-UINT }
4020 { MAX-UINT 2 UM* MAX-UINT UM/MOD -> 0 2 }
4030 { MAX-UINT MAX-UINT UM* MAX-UINT UM/MOD -> 0 MAX-UINT }

\ : IFFLOORED
\    [ -3 2 / -2 = INVERT ] LITERAL IF POSTPONE \ THEN ;
\ : IFSYM
\    [ -3 2 / -1 = INVERT ] LITERAL IF POSTPONE \ THEN ;

\ THE SYSTEM MIGHT DO EITHER FLOORED OR SYMMETRIC DIVISION.
\ SINCE WE HAVE ALREADY TESTED M*, FM/MOD, AND SM/REM WE CAN USE THEM IN TEST.
( IFFLOORED : T/MOD  >R S>D R> FM/MOD ; )
( IFFLOORED : T/     T/MOD SWAP DROP ; )
( IFFLOORED : TMOD   T/MOD DROP ; )
( IFFLOORED : T*/MOD >R M* R> FM/MOD ; )
( IFFLOORED : T*/    T*/MOD SWAP DROP ; )
( IFSYM )   : T/MOD  >R S>D R> SM/REM ;
( IFSYM )   : T/     T/MOD SWAP DROP ;
( IFSYM )   : TMOD   T/MOD DROP ;
( IFSYM )   : T*/MOD >R M* R> SM/REM ;
( IFSYM )   : T*/    T*/MOD SWAP DROP ;

4280 { 0 1 /MOD -> 0 1 T/MOD }
4290 { 1 1 /MOD -> 1 1 T/MOD }
4300 { 2 1 /MOD -> 2 1 T/MOD }
4310 { -1 1 /MOD -> -1 1 T/MOD }
4320 { -2 1 /MOD -> -2 1 T/MOD }
4330 { 0 -1 /MOD -> 0 -1 T/MOD }
4340 { 1 -1 /MOD -> 1 -1 T/MOD }
4350 { 2 -1 /MOD -> 2 -1 T/MOD }
4360 { -1 -1 /MOD -> -1 -1 T/MOD }
4370 { -2 -1 /MOD -> -2 -1 T/MOD }
4380 { 2 2 /MOD -> 2 2 T/MOD }
4390 { -1 -1 /MOD -> -1 -1 T/MOD }
4400 { -2 -2 /MOD -> -2 -2 T/MOD }
4410 { 7 3 /MOD -> 7 3 T/MOD }
4420 { 7 -3 /MOD -> 7 -3 T/MOD }
4430 { -7 3 /MOD -> -7 3 T/MOD }
4440 { -7 -3 /MOD -> -7 -3 T/MOD }
4450 { MAX-INT 1 /MOD -> MAX-INT 1 T/MOD }
4460 { MIN-INT 1 /MOD -> MIN-INT 1 T/MOD }
4470 { MAX-INT MAX-INT /MOD -> MAX-INT MAX-INT T/MOD }
4480 { MIN-INT MIN-INT /MOD -> MIN-INT MIN-INT T/MOD }

4500 { 0 1 / -> 0 1 T/ }
4510 { 1 1 / -> 1 1 T/ }
4520 { 2 1 / -> 2 1 T/ }
4530 { -1 1 / -> -1 1 T/ }
4540 { -2 1 / -> -2 1 T/ }
4550 { 0 -1 / -> 0 -1 T/ }
4560 { 1 -1 / -> 1 -1 T/ }
4570 { 2 -1 / -> 2 -1 T/ }
4580 { -1 -1 / -> -1 -1 T/ }
4590 { -2 -1 / -> -2 -1 T/ }
4600 { 2 2 / -> 2 2 T/ }
4610 { -1 -1 / -> -1 -1 T/ }
4620 { -2 -2 / -> -2 -2 T/ }
4630 { 7 3 / -> 7 3 T/ }
4640 { 7 -3 / -> 7 -3 T/ }
4650 { -7 3 / -> -7 3 T/ }
4660 { -7 -3 / -> -7 -3 T/ }
4670 { MAX-INT 1 / -> MAX-INT 1 T/ }
4680 { MIN-INT 1 / -> MIN-INT 1 T/ }
4690 { MAX-INT MAX-INT / -> MAX-INT MAX-INT T/ }
4700 { MIN-INT MIN-INT / -> MIN-INT MIN-INT T/ }

4720 { 0 1 MOD -> 0 1 TMOD }
4730 { 1 1 MOD -> 1 1 TMOD }
4740 { 2 1 MOD -> 2 1 TMOD }
4750 { -1 1 MOD -> -1 1 TMOD }
4760 { -2 1 MOD -> -2 1 TMOD }
4770 { 0 -1 MOD -> 0 -1 TMOD }
4780 { 1 -1 MOD -> 1 -1 TMOD }
4790 { 2 -1 MOD -> 2 -1 TMOD }
4800 { -1 -1 MOD -> -1 -1 TMOD }
4810 { -2 -1 MOD -> -2 -1 TMOD }
4820 { 2 2 MOD -> 2 2 TMOD }
4830 { -1 -1 MOD -> -1 -1 TMOD }
4840 { -2 -2 MOD -> -2 -2 TMOD }
4850 { 7 3 MOD -> 7 3 TMOD }
4860 { 7 -3 MOD -> 7 -3 TMOD }
4870 { -7 3 MOD -> -7 3 TMOD }
4880 { -7 -3 MOD -> -7 -3 TMOD }
4890 { MAX-INT 1 MOD -> MAX-INT 1 TMOD }
4900 { MIN-INT 1 MOD -> MIN-INT 1 TMOD }
4910 { MAX-INT MAX-INT MOD -> MAX-INT MAX-INT TMOD }
4920 { MIN-INT MIN-INT MOD -> MIN-INT MIN-INT TMOD }

4940 { 0 2 1 */ -> 0 2 1 T*/ }
4950 { 1 2 1 */ -> 1 2 1 T*/ }
4960 { 2 2 1 */ -> 2 2 1 T*/ }
4970 { -1 2 1 */ -> -1 2 1 T*/ }
4980 { -2 2 1 */ -> -2 2 1 T*/ }
4990 { 0 2 -1 */ -> 0 2 -1 T*/ }
5000 { 1 2 -1 */ -> 1 2 -1 T*/ }
5010 { 2 2 -1 */ -> 2 2 -1 T*/ }
5020 { -1 2 -1 */ -> -1 2 -1 T*/ }
5030 { -2 2 -1 */ -> -2 2 -1 T*/ }
5040 { 2 2 2 */ -> 2 2 2 T*/ }
5050 { -1 2 -1 */ -> -1 2 -1 T*/ }
5060 { -2 2 -2 */ -> -2 2 -2 T*/ }
5070 { 7 2 3 */ -> 7 2 3 T*/ }
5080 { 7 2 -3 */ -> 7 2 -3 T*/ }
5090 { -7 2 3 */ -> -7 2 3 T*/ }
5100 { -7 2 -3 */ -> -7 2 -3 T*/ }
5110 { MAX-INT 2 MAX-INT */ -> MAX-INT 2 MAX-INT T*/ }
5120 { MIN-INT 2 MIN-INT */ -> MIN-INT 2 MIN-INT T*/ }

5140 { 0 2 1 */MOD -> 0 2 1 T*/MOD }
5150 { 1 2 1 */MOD -> 1 2 1 T*/MOD }
5160 { 2 2 1 */MOD -> 2 2 1 T*/MOD }
5170 { -1 2 1 */MOD -> -1 2 1 T*/MOD }
5180 { -2 2 1 */MOD -> -2 2 1 T*/MOD }
5190 { 0 2 -1 */MOD -> 0 2 -1 T*/MOD }
5200 { 1 2 -1 */MOD -> 1 2 -1 T*/MOD }
5210 { 2 2 -1 */MOD -> 2 2 -1 T*/MOD }
5220 { -1 2 -1 */MOD -> -1 2 -1 T*/MOD }
5230 { -2 2 -1 */MOD -> -2 2 -1 T*/MOD }
5240 { 2 2 2 */MOD -> 2 2 2 T*/MOD }
5250 { -1 2 -1 */MOD -> -1 2 -1 T*/MOD }
5260 { -2 2 -2 */MOD -> -2 2 -2 T*/MOD }
5270 { 7 2 3 */MOD -> 7 2 3 T*/MOD }
5280 { 7 2 -3 */MOD -> 7 2 -3 T*/MOD }
5290 { -7 2 3 */MOD -> -7 2 3 T*/MOD }
5300 { -7 2 -3 */MOD -> -7 2 -3 T*/MOD }
5310 { MAX-INT 2 MAX-INT */MOD -> MAX-INT 2 MAX-INT T*/MOD }
5320 { MIN-INT 2 MIN-INT */MOD -> MIN-INT 2 MIN-INT T*/MOD }

\ ------------------------------------------------------------------------
." TESTING HERE , @ ! CELL+ CELLS C, C@ C! CHARS 2@ 2! ALIGN ALIGNED +! ALLOT" CR


\ HERE 1 ALLOT 0 C,
\ HERE
\ CONSTANT 2NDA
\ CONSTANT 1STA
\ 5410 { 1STA 2NDA U< -> <TRUE> }		\ HERE MUST GROW WITH ALLOT
\ 5420 { 1STA 1+ -> 2NDA }			\ ... BY ONE ADDRESS UNIT
\ ( MISSING TEST: NEGATIVE ALLOT )

CREATE HBUF 256 ALLOT HBUF ' _HERE ! ( Added )

HERE 1 ,
HERE 2 ,
CONSTANT 2ND
CONSTANT 1ST
5490 { 1ST 2ND U< -> <TRUE> }			\ HERE MUST GROW WITH ALLOT
5500 { 1ST CELL+ -> 2ND }			\ ... BY ONE CELL
5510 { 1ST 1 CELLS + -> 2ND }
5520 { 1ST @ 2ND @ -> 1 2 }
5530 { 5 1ST ! -> }
5540 { 1ST @ 2ND @ -> 5 2 }
5550 { 6 2ND ! -> }
5560 { 1ST @ 2ND @ -> 5 6 }
5570 { 1ST 2@ -> 6 5 }
5580 { 2 1 1ST 2! -> }
5590 { 1ST 2@ -> 2 1 }

HERE 1 C,
HERE 2 C,
CONSTANT 2NDC
CONSTANT 1STC
5650 { 1STC 2NDC U< -> <TRUE> }			\ HERE MUST GROW WITH ALLOT
5660 { 1STC CHAR+ -> 2NDC }			\ ... BY ONE CHAR
5670 { 1STC 1 CHARS + -> 2NDC }
5680 { 1STC C@ 2NDC C@ -> 1 2 }
5690 { 3 1STC C! -> }
5700 { 1STC C@ 2NDC C@ -> 3 2 }
5710 { 4 2NDC C! -> }
5720 { 1STC C@ 2NDC C@ -> 3 4 }

ALIGN						\ START THIS TEST ALIGNED
HERE ( 1 ALLOT replaced by ) 0 C, ALIGN 123 , CONSTANT X

5750 { X 1+ ALIGNED @ -> 123 }
( MISSING TEST: CHARS AT ALIGNED ADDRESS )

5780 { 1 CELLS 1 CHARS MOD -> 0 }		\ SIZE OF CELL MULTIPLE OF SIZE OF CHAR

5800 { 0 1ST ! -> }
5810 { 1 1ST +! -> }
5820 { 1ST @ -> 1 }
5830 { -1 1ST +! 1ST @ -> 0 }

\ ------------------------------------------------------------------------
." TESTING CHAR [CHAR] [ ] BL S_quotes" CR

5880 { BL -> 0x20 }
5890 { CHAR X -> 0x58 }
5900 { CHAR HELLO -> 0x48 }
5910 { : GC1 [CHAR] X ; -> }
5920 { : GC2 [CHAR] HELLO ; -> }
5930 { GC1 -> 0x58 }
5940 { GC2 -> 0x48 }
5950 { : GC3 [ GC1 ] LITERAL ; -> }
5960 { GC3 -> 0x58 }
5970 { : GC4 S" XY" ; -> }
5980 { GC4 SWAP DROP -> 2 }
5990 { GC4 DROP DUP C@ SWAP CHAR+ C@ -> 0x58 0x59 }

\ ------------------------------------------------------------------------
." TESTING ' ['] FIND EXECUTE IMMEDIATE COUNT LITERAL POSTPONE STATE" CR

6040 { : GT1 123 ; -> }
6050 { ' GT1 EXECUTE -> 123 }
6060 { : GT2 ['] GT1 ; IMMEDIATE -> }
6070 { GT2 EXECUTE -> 123 }
\ ---\ \ HERE 3 C, CHAR G C, CHAR T C, CHAR 1 C, CONSTANT GT1STRING
\ ---\ \ HERE 3 C, CHAR G C, CHAR T C, CHAR 2 C, CONSTANT GT2STRING
\ ---\ \ 6100 { GT1STRING FIND -> ' GT1 -1 }
\ ---\ \ 6110 { GT2STRING FIND -> ' GT2 1 }
\ ---\ \ ( HOW TO SEARCH FOR NON-EXISTENT WORD? )
\ ---\ \ 6130 { : GT3 GT2 LITERAL ; -> }
\ ---\ \ 6140 { GT3 -> ' GT1 }
\ ---\ \ 6150 { GT1STRING COUNT -> GT1STRING CHAR+ 3 }
\ ---\ \ 
\ ---\ \ 6170 { : GT4 POSTPONE GT1 ; IMMEDIATE -> }
\ ---\ \ 6180 { : GT5 GT4 ; -> }
\ ---\ \ 6190 { GT5 -> 123 }
\ ---\ \ 6200 { : GT6 345 ; IMMEDIATE -> }
\ ---\ \ 6210 { : GT7 POSTPONE GT6 ; -> }
\ ---\ \ 6220 { GT7 -> 345 }
 
6240 { : GT8 STATE @ ; IMMEDIATE -> }
6250 { GT8 -> 0 }
6260 { : GT9 ' GT8 LITERAL ; -> }
6270 { GT9 0= -> <FALSE> }

\ ------------------------------------------------------------------------
." TESTING IF ELSE THEN BEGIN WHILE REPEAT UNTIL RECURSE" CR

6320 { : GI1 IF 123 THEN ; -> }
6330 { : GI2 IF 123 ELSE 234 THEN ; -> }
6340 { 0 GI1 -> }
6350 { 1 GI1 -> 123 }
6360 { -1 GI1 -> 123 }
6370 { 0 GI2 -> 234 }
6380 { 1 GI2 -> 123 }
6390 { -1 GI1 -> 123 }

6410 { : GI3 BEGIN DUP 5 < WHILE DUP 1+ REPEAT ; -> }
6420 { 0 GI3 -> 0 1 2 3 4 5 }
6430 { 4 GI3 -> 4 5 }
6440 { 5 GI3 -> 5 }
6450 { 6 GI3 -> 6 }

6470 { : GI4 BEGIN DUP 1+ DUP 5 > UNTIL ; -> }
6480 { 3 GI4 -> 3 4 5 6 }
6490 { 5 GI4 -> 5 6 }
6500 { 6 GI4 -> 6 7 }

6520 { : GI5 BEGIN DUP 2 > WHILE DUP 5 < WHILE DUP 1+ REPEAT ; -> }
6530 { 1 GI5 -> 1 }
6540 { 2 GI5 -> 2 }
6550 { 3 GI5 -> 3 4 5 }
6560 { 4 GI5 -> 4 5 }
6570 { 5 GI5 -> 5 }

6600 { : GI6 ( N -- 0,1,..N ) DUP IF DUP >R 1- RECURSE R> THEN ; -> }
6610 { 0 GI6 -> 0 }
6620 { 1 GI6 -> 0 1 }
6630 { 2 GI6 -> 0 1 2 }
6640 { 3 GI6 -> 0 1 2 3 }
6650 { 4 GI6 -> 0 1 2 3 4 }

\ ------------------------------------------------------------------------
." TESTING DO LOOP +LOOP I J UNLOOP LEAVE EXIT" CR

6700 { : GD1 DO I LOOP ; -> }
6710 { 4 1 GD1 -> 1 2 3 }
6720 { 2 -1 GD1 -> -1 0 1 }
6730 { MID-UINT+1 MID-UINT GD1 -> MID-UINT }

6750 { : GD2 DO I -1 +LOOP ; -> }
6760 { 1 4 GD2 -> 4 3 2 1 }
6770 { -1 2 GD2 -> 2 1 0 -1 }
6780 { MID-UINT MID-UINT+1 GD2 -> MID-UINT+1 MID-UINT }

6800 { : GD3 DO 1 0 DO J LOOP LOOP ; -> }
6810 { 4 1 GD3 -> 1 2 3 }
6820 { 2 -1 GD3 -> -1 0 1 }
6830 { MID-UINT+1 MID-UINT GD3 -> MID-UINT }

6850 { : GD4 DO 1 0 DO J LOOP -1 +LOOP ; -> }
6860 { 1 4 GD4 -> 4 3 2 1 }
6870 { -1 2 GD4 -> 2 1 0 -1 }
6880 { MID-UINT MID-UINT+1 GD4 -> MID-UINT+1 MID-UINT }

6900 { : GD5 123 SWAP 0 DO I 4 > IF DROP 234 LEAVE THEN LOOP ; -> }
6910 { 1 GD5 -> 123 }
6920 { 5 GD5 -> 123 }
6930 { 6 GD5 -> 234 }

6950 { : GD6  ( PAT: {0 0},{0 0}{1 0}{1 1},{0 0}{1 0}{1 1}{2 0}{2 1}{2 2} )
   0 SWAP 0 DO
      I 1+ 0 DO I J + 3 = IF I UNLOOP I UNLOOP EXIT THEN 1+ LOOP
    LOOP ; -> }
6990 { 1 GD6 -> 1 }
7000 { 2 GD6 -> 3 }
7010 { 3 GD6 -> 4 1 2 }

\ ---\ ------------------------------------------------------------------------
\ ---." TESTING DEFINING WORDS: : ; CONSTANT VARIABLE CREATE DOES> >BODY" CR
\ ---
\ ---7060 { 123 CONSTANT X123 -> }
\ ---7070 { X123 -> 123 }
\ ---\ \ 7080 { : EQU CONSTANT ; -> }
\ ---\ \ 7090 { X123 EQU Y123 -> }
\ ---7100 { X123 CONSTANT Y123 -> }
\ ---7110 { Y123 -> 123 }
\ ---
\ ---7130 { VARIABLE V1 -> }
\ ---7140 { 123 V1 ! -> }
\ ---7150 { V1 @ -> 123 }
\ ---
\ ---7170 { : NOP : POSTPONE ; ; -> }
\ ---7180 { NOP NOP1 NOP NOP2 -> }
\ ---7190 { NOP1 -> }
\ ---7200 { NOP2 -> }
\ ---
\ ---\ \ 7220 { : DOES1 DOES> @ 1 + ; -> }
\ ---\ \ 7230 { : DOES2 DOES> @ 2 + ; -> }
\ ---\ \ 7240 { CREATE CR1 -> }
\ ---\ \ 7250 { CR1 -> HERE }
\ ---\ \ 7260 { ' CR1 >BODY -> HERE }
\ ---\ \ 7270 { 1 , -> }
\ ---\ \ 7280 { CR1 @ -> 1 }
\ ---\ \ 7290 { DOES1 -> }
\ ---\ \ 7300 { CR1 -> 2 }
\ ---\ \ 7310 { DOES2 -> }
\ ---\ \ 7320 { CR1 -> 3 }
\ ---
\ ---\ \ 7340 { : WEIRD: CREATE DOES> 1 + DOES> 2 + ; -> }
\ ---\ \ 7350 { WEIRD: W1 -> }
\ ---\ \ 7360 { ' W1 >BODY -> HERE }
\ ---\ \ 7370 { W1 -> HERE 1 + }
\ ---\ \ 7380 { W1 -> HERE 2 + }
\ ---
\ ---\ ------------------------------------------------------------------------
\ ---." TESTING EVALUATE" CR
\ ---
\ ---: GE1 S" 123" ; IMMEDIATE
\ ---: GE2 S" 123 1+" ; IMMEDIATE
\ ---: GE3 S" : GE4 345 ;" ;
\ ---: GE5 EVALUATE ; IMMEDIATE
\ ---
\ ---7480 { GE1 EVALUATE -> 123 }			( TEST EVALUATE IN INTERP. STATE )
\ ---7490 { GE2 EVALUATE -> 124 }
\ ---7500 { GE3 EVALUATE -> }
\ ---7510 { GE4 -> 345 }
\ ---
\ ---7530 { : GE6 GE1 GE5 ; -> }			( TEST EVALUATE IN COMPILE STATE )
\ ---7540 { GE6 -> 123 }
\ ---7550 { : GE7 GE2 GE5 ; -> }
\ ---7560 { GE7 -> 124 }
\ ---
\ ---\ ------------------------------------------------------------------------
\ ---." TESTING SOURCE >IN WORD" CR
\ ---
\ ---: GS1 S" SOURCE" 2DUP EVALUATE
\ ---       >R SWAP >R = R> R> = ;
\ ---7630 { GS1 -> <TRUE> <TRUE> }
\ ---
\ ---VARIABLE SCANS
\ ---: RESCAN?  -1 SCANS +! SCANS @ IF 0 >IN ! THEN ;
\ ---
\ ---7680 { 2 SCANS !
\ ---345 RESCAN?
\ ----> 345 345 }
\ ---
\ ---: GS2  5 SCANS ! S" 123 RESCAN?" EVALUATE ;
\ ---7730 { GS2 -> 123 123 123 123 123 }
\ ---
\ ---: GS3 BL WORD COUNT SWAP C@ ;
\ ---7760 { GS3 HELLO -> 5 CHAR H }
\ ---
\ ---: GS4 SOURCE >IN ! DROP ;
\ ---7790 { GS4 123 456
\ ----> }
\ ---
\ ------------------------------------------------------------------------
." TESTING <# # #S #> HOLD SIGN BASE >NUMBER HEX DECIMAL" CR

: S=  \ ( ADDR1 C1 ADDR2 C2 -- T/F ) COMPARE TWO STRINGS.
   >R SWAP R@ = IF			\ MAKE SURE STRINGS HAVE SAME LENGTH
      R> ?DUP IF			\ IF NON-EMPTY STRINGS
	 0 DO
	    OVER C@ OVER C@ - IF 2DROP <FALSE> UNLOOP EXIT THEN
	    SWAP CHAR+ SWAP CHAR+
         LOOP
      THEN
      2DROP <TRUE>			\ IF WE GET HERE, STRINGS MATCH
   ELSE
      R> DROP 2DROP <FALSE>		\ LENGTHS MISMATCH
   THEN ;

: GP1  <# 0x41 HOLD 0x42 HOLD 0 0 #> S" BA" S= ;
7990 { GP1 -> <TRUE> }

: GP2  <# -1 SIGN 0 SIGN -1 SIGN 0 0 #> S" --" S= ;
8020 { GP2 -> <TRUE> }

: GP3  <# 1 0 # # #> S" 01" S= ;
8050 { GP3 -> <TRUE> }

: GP4  <# 1 0 #S #> S" 1" S= ;
8080 { GP4 -> <TRUE> }

0x24 CONSTANT MAX-BASE			\ BASE 2 .. 36
: COUNT-BITS
   0 0 INVERT BEGIN DUP WHILE >R 1+ R> 2* REPEAT DROP ;
COUNT-BITS 2* CONSTANT #BITS-UD		\ NUMBER OF BITS IN UD

: GP5
   BASE @ <TRUE>
   MAX-BASE 1+ 2 DO			\ FOR EACH POSSIBLE BASE
      I BASE !				\ TBD: ASSUMES BASE WORKS
      I 0 <# #S #> S" 10" S= AND
   LOOP
   SWAP BASE ! ;
8220 { GP5 -> <TRUE> }

: GP6
   BASE @ >R  2 BASE !
\  MAX-UINT MAX-UINT <# #S #>		\ MAXIMUM UD TO BINARY
   <# MAX-UINT 0 #S 2DROP
      MAX-UINT 0 #S #>			\ MAXIMUM UD TO BINARY
   R> BASE !				\ S: C-ADDR U
   DUP #BITS-UD = SWAP
   0 DO					\ S: C-ADDR FLAG
      OVER C@ [CHAR] 1 = AND		\ ALL ONES
      >R CHAR+ R>
   LOOP SWAP DROP ;
8330 { GP6 -> <TRUE> }

\ 0 [IF]
\ IMHO the following definition fails not only because lower- or uppercase A
\ but mainly because of >R ... I ... R>, which is not allowed. (duz)
\ 
\ : GP7
\    BASE @ >R  MAX-BASE BASE !
\    <TRUE>
\    A 0 DO
\       I 0 <# #S #>
\       >R C@ 30 I + = AND R> 1 = AND
\    LOOP
\    MAX-BASE 1+ A DO
\       I 0 <# #S #>
\       >R C@ 41 I A - + = AND R> 1 = AND
\    LOOP
\    R> BASE ! ;
\ 8510 { GP7 -> <TRUE> }	\ BUG: FAILS ON JHFORTH: LOWERCASE A
\ 
\ [ELSE]

\ This is a version I changed from the above

: GP7
   BASE @ >R  MAX-BASE BASE !
   <TRUE>
   0xA 0 DO
      I 0 <# #S #>
      1 =  SWAP C@ 0x30 I + =  AND  AND
   LOOP
   MAX-BASE 0xA DO
      I 0 <# #S #>
      1 =  SWAP C@ 0x41 I 0xA - + =  AND  AND
   LOOP
   R> BASE ! ;
8690 { GP7 -> <TRUE> }

\ [THEN]

\ >NUMBER TESTS
\ CREATE GN-BUF 0 C,
CREATE GN-BUF 10 CHARS ALLOT
: GN-STRING	GN-BUF 1 ;
: GN-CONSUMED	GN-BUF CHAR+ 0 ;
\ : GN'		[CHAR] ' WORD CHAR+ C@ GN-BUF C!  GN-STRING ;
: GN'		GN-BUF C! GN-STRING ;

8800 { 0 0 [ CHAR 0 ] LITERAL GN' >NUMBER -> 0 0 GN-CONSUMED }
8810 { 0 0 [ CHAR 1 ] LITERAL GN' >NUMBER -> 1 0 GN-CONSUMED }
8820 { 1 0 [ CHAR 1 ] LITERAL GN' >NUMBER -> BASE @ 1+ 0 GN-CONSUMED }
8830 { 0 0 [ CHAR - ] LITERAL GN' >NUMBER -> 0 0 GN-STRING }	\ SHOULD FAIL TO CONVERT THESE
8840 { 0 0 [ CHAR + ] LITERAL GN' >NUMBER -> 0 0 GN-STRING }
8850 { 0 0 [ CHAR . ] LITERAL GN' >NUMBER -> 0 0 GN-STRING }

: >NUMBER-BASED
   BASE @ >R BASE ! >NUMBER R> BASE ! ;

8900 { 0 0 [ CHAR 2 ] LITERAL GN' 0x10 >NUMBER-BASED -> 0x2 0 GN-CONSUMED }
8910 { 0 0 [ CHAR 2 ] LITERAL GN' 0x02 >NUMBER-BASED -> 0x0 0 GN-STRING }
8920 { 0 0 [ CHAR F ] LITERAL GN' 0x10 >NUMBER-BASED -> 0xF 0 GN-CONSUMED }
8930 { 0 0 [ CHAR G ] LITERAL GN' 0x10 >NUMBER-BASED -> 0x0 0 GN-STRING }
8940 { 0 0 [ CHAR G ] LITERAL GN' MAX-BASE >NUMBER-BASED -> 0x10 0 GN-CONSUMED }
8950 { 0 0 [ CHAR Z ] LITERAL GN' MAX-BASE >NUMBER-BASED -> 0x23 0 GN-CONSUMED }

: GN1	\ ( UD BASE -- UD' LEN ) UD SHOULD EQUAL UD' AND LEN SHOULD BE ZERO.
   BASE @ >R BASE !
   <# #S #>
   0 0 2SWAP >NUMBER SWAP DROP		\ RETURN LENGTH ONLY
   R> BASE ! ;
9020 { 0 0 2 GN1 -> 0 0 0 }
9030 { MAX-UINT 0 2 GN1 -> MAX-UINT 0 0 }
\ \ 9040 { MAX-UINT DUP 2 GN1 -> MAX-UINT DUP 0 }
9050 { 0 0 MAX-BASE GN1 -> 0 0 0 }
9060 { MAX-UINT 0 MAX-BASE GN1 -> MAX-UINT 0 0 }
\ \ 9070 { MAX-UINT DUP MAX-BASE GN1 -> MAX-UINT DUP 0 }

: GN2	\ ( -- 16 10 )
   BASE @ >R  HEX BASE @  DECIMAL BASE @  R> BASE ! ;
9110 { GN2 -> 0x10 0xA }

\ ------------------------------------------------------------------------
." TESTING FILL MOVE" CR

\ \ CREATE FBUF 00 C, 00 C, 00 C,
\ \ CREATE SBUF 12 C, 34 C, 56 C,
CREATE FBUF 3 CHARS ALLOT
CREATE SBUF 3 CHARS ALLOT
0x12 SBUF C! 0x34 SBUF CHAR+ C! 0x56 SBUF CHAR+ CHAR+ C!
: SEEBUF FBUF C@  FBUF CHAR+ C@  FBUF CHAR+ CHAR+ C@ ;

9220 { FBUF 0 0x20 FILL -> }
9230 { SEEBUF -> 0x00 0x00 0x00 }

9250 { FBUF 1 0x20 FILL -> }
9260 { SEEBUF -> 0x20 0x00 0x00 }

9280 { FBUF 3 0x20 FILL -> }
9290 { SEEBUF -> 0x20 0x20 0x20 }

9310 { FBUF FBUF 3 CHARS MOVE -> }		\ BIZARRE SPECIAL CASE
9320 { SEEBUF -> 0x20 0x20 0x20 }

9340 { SBUF FBUF 0 CHARS MOVE -> }
9350 { SEEBUF -> 0x20 0x20 0x20 }

9370 { SBUF FBUF 1 CHARS MOVE -> }
9380 { SEEBUF -> 0x12 0x20 0x20 }

9400 { SBUF FBUF 3 CHARS MOVE -> }
9410 { SEEBUF -> 0x12 0x34 0x56 }

9430 { FBUF FBUF CHAR+ 2 CHARS MOVE -> }
9440 { SEEBUF -> 0x12 0x12 0x34 }

9460 { FBUF CHAR+ FBUF 2 CHARS MOVE -> }
9470 { SEEBUF -> 0x12 0x34 0x34 }

\ ------------------------------------------------------------------------
." TESTING OUTPUT: . ._quote CR EMIT SPACE SPACES TYPE U." CR

: OUTPUT-TEST
   ." YOU SHOULD SEE 0-9 SEPARATED BY A SPACE:" CR
   9 1+ 0 DO I . LOOP CR
   ." YOU SHOULD SEE 0-9 (WITH NO SPACES):" CR
   [CHAR] 9 1+ [CHAR] 0 DO I 0 SPACES EMIT LOOP CR
   ." YOU SHOULD SEE A-G SEPARATED BY A SPACE:" CR
   [CHAR] G 1+ [CHAR] A DO I EMIT SPACE LOOP CR
   ." YOU SHOULD SEE 0-5 SEPARATED BY TWO SPACES:" CR
   5 1+ 0 DO I [CHAR] 0 + EMIT 2 SPACES LOOP CR
   ." YOU SHOULD SEE TWO SEPARATE LINES:" CR
   S" LINE 1" TYPE CR S" LINE 2" TYPE CR
   ." YOU SHOULD SEE THE NUMBER RANGES OF SIGNED AND UNSIGNED NUMBERS:" CR
   ."   SIGNED: " MIN-INT . MAX-INT . CR
   ." UNSIGNED: " 0 U. MAX-UINT U. CR
;

9680 { OUTPUT-TEST -> }

\ ------------------------------------------------------------------------
." TESTING INPUT: ACCEPT" CR

CREATE ABUF 80 CHARS ALLOT

: ACCEPT-TEST
   CR ." PLEASE TYPE UP TO 80 CHARACTERS:" CR
   ABUF 80 ACCEPT
   CR ." RECEIVED: " [CHAR] " EMIT
   ABUF SWAP TYPE [CHAR] " EMIT CR
;

9820 { ACCEPT-TEST -> }

\ ---\ ------------------------------------------------------------------------
\ ---\ \ ." TESTING DICTIONARY SEARCH RULES" CR
\ ---
\ ---\ \ 9870 { : GDX   123 ; : GDX   GDX 234 ; -> }
\ ---
\ ---\ \ 9890 { GDX -> 123 234 }
\ ---

TEST-STATUS @ DROP
